{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# 06. Animating HNN simulations\n\nThis example demonstrates how to animate HNN simulations\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# Author: Nick Tolley <nicholas_tolley@brown.edu>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "First, we'll import the necessary modules for instantiating a network and\nrunning a simulation that we would like to animate.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import os.path as op\n\nimport hnn_core\nfrom hnn_core import jones_2009_model, simulate_dipole, read_params\nfrom hnn_core.network_models import add_erp_drives_to_jones_model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We begin by instantiating the network. For this example, we will reduce the\nnumber of cells in the network to speed up the simulations.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net = jones_2009_model(mesh_shape=(3, 3))\n\n# Note that we move the cells further apart to allow better visualization of\n# the network (default inplane_distance=1.0 \u00b5m).\nnet.set_cell_positions(inplane_distance=300)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The :class:`hnn_core.viz.NetworkPlotter` class can be used to visualize\nthe 3D structure of the network.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "from hnn_core.viz import NetworkPlotter\n\nnet_plot = NetworkPlotter(net)\nnet_plot.fig"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We can also visualize the network from another angle by adjusting the\nazimuth and elevation parameters.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net_plot.azim = 45\nnet_plot.elev = 40\nnet_plot.fig"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Next we add event related potential (ERP) producing drives to the network\nand run the simulation (see\n`evoked example <sphx_glr_auto_examples_plot_simulate_evoked.py>`\nfor more details).\nTo visualize the membrane potential of cells in the\nnetwork, we need use `simulate_dipole(..., record_vsec='all')` which turns\non the recording of voltages in all sections of all cells in the network.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "add_erp_drives_to_jones_model(net)\ndpl = simulate_dipole(net, tstop=170, record_vsec='all')\nnet_plot = NetworkPlotter(net)  # Reinitialize plotter with simulated network"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Finally, we can animate the simulation using the `export_movie()` method. We\ncan adjust the xyz limits of the plot to better visualize the network.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net_plot.xlim = (400, 1600)\nnet_plot.ylim = (400, 1600)\nnet_plot.zlim = (-500, 1600)\nnet_plot.azim = 225\nnet_plot.export_movie('animation_demo.gif', dpi=100, fps=30, interval=100)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.4"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}