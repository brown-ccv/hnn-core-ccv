{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# 02. Record extracellular potentials\n\nThe main output of HNN simulations is the 'dipole' waveform, i.e., the net\nintracellular current flowing in pyramidal cell apical dendrites. At the large\ndistances between cells and M/EEG sensors, this 'primary' current is the main\ncontributor to the measured fields. Close to the cells, the local field\npotential (LFP) is the result of intracellular current leaking into the\nextracellular medium through active and passive membrane channels. Under some\nsimplifying assumptions, we may approximate the LFP at virtual electrodes\nplaced in and around the HNN network model.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# Authors: Christopher Bailey <cjb@cfin.au.dk>\n#          Mainak Jas <mainakjas@gmail.com>\n#          Nick Tolley <nicholas_tolley@brown.edu>\n\n# sphinx_gallery_thumbnail_number = 3\n\nimport matplotlib.pyplot as plt\n\nfrom hnn_core import jones_2009_model, simulate_dipole\nfrom hnn_core.network_models import add_erp_drives_to_jones_model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The default network model defined in Jones et al. (2009) [1]_ consists of a\nsquare grid of pyramidal cells. The in-plane distance between pyramidal cell\nsomas on the grid can be set by the user, which will have an influence on the\nextracellular potentials (but not on the calculated net intracellular dipole\nmoment). In this example, we'll simulate a network of model cells spaced\n30 um apart. To drive the network dynamics, we'll use three evoked 'ERP'\ndrives; see the event-related potential (ERP) example for details.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net = jones_2009_model()\nadd_erp_drives_to_jones_model(net)\n\nnet.set_cell_positions(inplane_distance=30.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Extracellular recordings require specifying the electrode postions. It can be\nuseful to visualize the cells of the network to decide on the placement of\neach electrode.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net.plot_cells()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The default network consists of 2 layers (L2 and L5), within which the cell\nsomas are arranged in a regular grid, and apical dendrites are aligned along\nthe z-axis. We can simulate a linear multielectrode array with 100 um\nintercontact spacing [2]_ by specifying a list of (x, y, z) coordinate\ntriplets. The L5 pyramidal cell somas are at z=0 um, with apical dendrites\nextending up to z~2000 um. L2 pyramidal cell somas reside at\nz~1300 um, and have apical dendrites extending to z~2300 um. We'll place the\nrecording array in the center of the network. By default, a value of\n0.3 S/m is used for the constant extracellular conductivity and the\n'point source approximation' for calculations; see\n:meth:`hnn_core.Network.add_electrode_array` for details.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "depths = list(range(-325, 2150, 100))\nelectrode_pos = [(135, 135, dep) for dep in depths]\nnet.add_electrode_array('shank1', electrode_pos)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The electrode arrays are stored under ``Network.rec_arrays`` as a dictionary\nof :class:`hnn_core.extracellular.ElectrodeArray` objects that are now\nattached to the network and will be recorded during the simulation. Note that\ncalculating the extracellular potentials requires additional computational\nresources and will thus slightly slow down the simulation.\n`Using MPI <sphx_glr_auto_examples_plot_simulate_mpi_backend.py>` will\nspeed up computation considerably.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "print(net.rec_arrays)\nnet.plot_cells()\n\ndpl = simulate_dipole(net, tstop=170)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For plotting both aggregate dipole moment and LFP traces, we'll use a 10 ms\nsmoothing window, after which both data can be decimated by a factor of 20\nfrom 40 to 2 kHz sampling rates (note that decimation is applied in two\nsteps). Decimation speeds up plotting significantly.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "trial_idx = 0\nwindow_len = 10  # ms\ndecimate = [5, 4]  # from 40k to 8k to 2k\nfig, axs = plt.subplots(3, 1, sharex=True, figsize=(6, 8),\n                        gridspec_kw={'height_ratios': [1, 3, 2]})\n\n# Then plot the aggregate dipole time series on its own axis\ndpl[trial_idx].copy().smooth(\n    window_len=window_len).plot(ax=axs[0], decim=decimate,\n                                show=False)\n\nvoltage_offset = 50  # the spacing between individual traces\nvoltage_scalebar = 200  # can be different from offset\n# we can assign each electrode a unique color using a linear colormap\ncolors = plt.get_cmap('cividis', len(electrode_pos))\n\n# use the same smoothing window on the LFP traces to allow comparison to dipole\nnet.rec_arrays['shank1'][trial_idx].smooth(window_len=window_len).plot(\n    ax=axs[1], contact_labels=depths, color=colors, decim=decimate, show=False,\n    voltage_offset=voltage_offset, voltage_scalebar=voltage_scalebar)\n\naxs[1].grid(True, which='major', axis='x')\naxs[1].set_xlabel('')\n# Finally, add the spike raster to the bottom subplot\nnet.cell_response.plot_spikes_raster(ax=axs[2], show=False)\nplt.tight_layout()\nplt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## References\n.. [1] Jones, S. R. et al. Quantitative analysis and biophysically realistic\n   neural modeling of the MEG mu rhythm: rhythmogenesis and modulation of\n   sensory-evoked responses. J. Neurophysiol. 102, 3554\u20133572 (2009).\n.. [2] Kajikawa, Y. & Schroeder, C. E. How local is the local field\n       potential? Neuron 72, 847\u2013858 (2011).\n\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}