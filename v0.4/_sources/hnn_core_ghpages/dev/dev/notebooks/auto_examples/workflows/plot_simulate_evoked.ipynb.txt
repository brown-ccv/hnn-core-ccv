{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# 01. Simulate Event Related Potentials (ERPs)\n\nThis example demonstrates how to simulate a threshold level tactile\nevoked response, as detailed in the [HNN GUI ERP tutorial](https://jonescompneurolab.github.io/hnn-tutorials/erp/erp),\nusing HNN-core. We recommend you first review the GUI tutorial.\n\nThe workflow below recreates an example of the threshold level tactile\nevoked response, as observed in Jones et al. J. Neuroscience 2007 [1]_\n(e.g. Figure 7 in the GUI tutorial), albeit without a direct comparison\nto the recorded data.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# Authors: Mainak Jas <mmjas@mgh.harvard.edu>\n#          Sam Neymotin <samnemo@gmail.com>\n#          Blake Caldwell <blake_caldwell@brown.edu>\n#          Christopher Bailey <cjb@cfin.au.dk>\n\n# sphinx_gallery_thumbnail_number = 3\n\nimport os.path as op\nimport tempfile\n\nimport matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let us import hnn_core\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import hnn_core\nfrom hnn_core import simulate_dipole, jones_2009_model\nfrom hnn_core.viz import plot_dipole"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let us first create our default network and visualize the cells\ninside it.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net = jones_2009_model()\nnet.plot_cells()\nnet.cell_types['L5_pyramidal'].plot_morphology()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The network of cells is now defined, to which we add external drives as\nrequired. Weights are prescribed separately for AMPA and NMDA receptors\n(receptors that are not used can be omitted or set to zero). The possible\ndrive types include the following (click on the links for documentation):\n\n- :meth:`hnn_core.Network.add_evoked_drive`\n- :meth:`hnn_core.Network.add_poisson_drive`\n- :meth:`hnn_core.Network.add_bursty_drive`\n\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "First, we add a distal evoked drive\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "weights_ampa_d1 = {'L2_basket': 0.006562, 'L2_pyramidal': .000007,\n                   'L5_pyramidal': 0.142300}\nweights_nmda_d1 = {'L2_basket': 0.019482, 'L2_pyramidal': 0.004317,\n                   'L5_pyramidal': 0.080074}\nsynaptic_delays_d1 = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,\n                      'L5_pyramidal': 0.1}\nnet.add_evoked_drive(\n    'evdist1', mu=63.53, sigma=3.85, numspikes=1, weights_ampa=weights_ampa_d1,\n    weights_nmda=weights_nmda_d1, location='distal',\n    synaptic_delays=synaptic_delays_d1, event_seed=274)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Then, we add two proximal drives\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "weights_ampa_p1 = {'L2_basket': 0.08831, 'L2_pyramidal': 0.01525,\n                   'L5_basket': 0.19934, 'L5_pyramidal': 0.00865}\nsynaptic_delays_prox = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,\n                        'L5_basket': 1., 'L5_pyramidal': 1.}\n# all NMDA weights are zero; pass None explicitly\nnet.add_evoked_drive(\n    'evprox1', mu=26.61, sigma=2.47, numspikes=1, weights_ampa=weights_ampa_p1,\n    weights_nmda=None, location='proximal',\n    synaptic_delays=synaptic_delays_prox, event_seed=544)\n\n# Second proximal evoked drive. NB: only AMPA weights differ from first\nweights_ampa_p2 = {'L2_basket': 0.000003, 'L2_pyramidal': 1.438840,\n                   'L5_basket': 0.008958, 'L5_pyramidal': 0.684013}\n# all NMDA weights are zero; omit weights_nmda (defaults to None)\nnet.add_evoked_drive(\n    'evprox2', mu=137.12, sigma=8.33, numspikes=1,\n    weights_ampa=weights_ampa_p2, location='proximal',\n    synaptic_delays=synaptic_delays_prox, event_seed=814)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now let's simulate the dipole, running 2 trials with the\n:class:`~hnn_core.parallel_backends.Joblib` backend.\nTo run them in parallel we could set ``n_jobs`` to equal the number of\ntrials. The ``Joblib`` backend allows running the simulations in parallel\nacross trials.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "from hnn_core import JoblibBackend\n\nwith JoblibBackend(n_jobs=2):\n    dpls = simulate_dipole(net, tstop=170., n_trials=2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Rather than reading smoothing and scaling parameters from file, we recommend\nexplicit use of the :meth:`~hnn_core.dipole.Dipole.smooth` and\n:meth:`~hnn_core.dipole.Dipole.scale` methods instead. Note that both methods\noperate in-place, i.e., the objects are modified.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "window_len, scaling_factor = 30, 3000\nfor dpl in dpls:\n    dpl.smooth(window_len).scale(scaling_factor)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Plot the amplitudes of the simulated aggregate dipole moments over time\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\nfig, axes = plt.subplots(2, 1, sharex=True, figsize=(6, 6),\n                         constrained_layout=True)\nplot_dipole(dpls, ax=axes[0], layer='agg', show=False)\nnet.cell_response.plot_spikes_hist(ax=axes[1],\n                                   spike_types=['evprox', 'evdist'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "If you want to analyze how the different cortical layers contribute to\ndifferent net waveform features, then instead of passing ``'agg'`` to\n``layer``, you can provide a list of layers to be visualized and optionally\na list of axes to ``ax`` to visualize the dipole moments separately.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "plot_dipole(dpls, average=False, layer=['L2', 'L5', 'agg'], show=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now, let us try to make the exogenous driving inputs to the cells\nsynchronous and see what happens. This is achieved by setting\n``n_drive_cells=1`` and ``cell_specific=False`` when adding each drive.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net_sync = jones_2009_model()\n\nn_drive_cells=1\ncell_specific=False\n\nnet_sync.add_evoked_drive(\n    'evdist1', mu=63.53, sigma=3.85, numspikes=1, weights_ampa=weights_ampa_d1,\n    weights_nmda=weights_nmda_d1, location='distal', n_drive_cells=n_drive_cells,\n    cell_specific=cell_specific, synaptic_delays=synaptic_delays_d1, event_seed=274)\n\nnet_sync.add_evoked_drive(\n    'evprox1', mu=26.61, sigma=2.47, numspikes=1, weights_ampa=weights_ampa_p1,\n    weights_nmda=None, location='proximal', n_drive_cells=n_drive_cells,\n    cell_specific=cell_specific, synaptic_delays=synaptic_delays_prox, event_seed=544)\n\nnet_sync.add_evoked_drive(\n    'evprox2', mu=137.12, sigma=8.33, numspikes=1,\n    weights_ampa=weights_ampa_p2, location='proximal', n_drive_cells=n_drive_cells,\n    cell_specific=cell_specific, synaptic_delays=synaptic_delays_prox, event_seed=814)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "You may interrogate current values defining the spike event time dynamics by\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "print(net_sync.external_drives['evdist1']['dynamics'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Finally, let's simulate this network. Rather than modifying the dipole\nobject, this time we make a copy of it before smoothing and scaling.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dpls_sync = simulate_dipole(net_sync, tstop=170., n_trials=1)\n\ntrial_idx = 0\ndpls_sync[trial_idx].copy().smooth(window_len).scale(scaling_factor).plot()\nnet_sync.cell_response.plot_spikes_hist()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-danger\"><h4>Warning</h4><p>- Always look at dipoles in conjunction with raster plots and spike\n     histogram to avoid misinterpretation.\n   - Run multiple trials of your simulation to get an average of different\n     drives seeds before drawing conclusions.</p></div>\n\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## References\n.. [1] Jones, Stephanie R., et al. \"Neural correlates of tactile detection:\n       a combined magnetoencephalography and biophysically based computational\n       modeling study.\" Journal of Neuroscience 27.40 (2007): 10751-10764.\n\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.19"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}