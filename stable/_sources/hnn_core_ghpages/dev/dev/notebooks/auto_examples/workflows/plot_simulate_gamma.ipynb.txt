{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# 03. Simulate Gamma Rhythms\n\nThis example demonstrates how to simulate gamma rhythms via the well\nestablished pyramidal-interneuron-gamma mechanisms [1]_,\nas detailed in the [HNN GUI gamma tutorial](https://jonescompneurolab.github.io/hnn-tutorials/gamma/gamma),\nusing HNN-Core.\n\nWe recommend you first review the GUI tutorial.\nThe workflow below recreates weak gamma rhythms similar to Figures 4 and 5\nof the GUI tutorial, and strong gamma rhythms similar to Figure 12 and 13\nin the GUI tutorial.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# Authors: Mainak Jas <mjas@mgh.harvard.edu>\n#          Sam Neymotin <samnemo@gmail.com>\n#          Christopher Bailey <bailey.cj@gmail.com>\n\n# sphinx_gallery_thumbnail_number = 2\n\nimport os.path as op"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let us import hnn_core\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import hnn_core\nfrom hnn_core import simulate_dipole, read_params, jones_2009_model\n\nhnn_core_root = op.dirname(hnn_core.__file__)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Read the parameter file and print the between-cell connectivity parameters.\nNote that these are different compared with the 'default' parameter set used\nin, e.g., `sphx_glr_auto_examples_workflows_plot_simulate_alpha.py`.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "params_fname = op.join(hnn_core_root, 'param', 'gamma_L5weak_L2weak.json')\nparams = read_params(params_fname)\nprint(params['gbar_L*'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We'll add a tonic Poisson-distributed excitation to pyramidal cells and\nsimulate the dipole moment in a single trial (the default value used by\n``simulate_dipole`` is ``n_trials=params['N_trials']``).\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net = jones_2009_model(params)\n\nweights_ampa = {'L2_pyramidal': 0.0008, 'L5_pyramidal': 0.0075}\nsynaptic_delays = {'L2_pyramidal': 0.1, 'L5_pyramidal': 1.0}\nrate_constant = {'L2_pyramidal': 140.0, 'L5_pyramidal': 40.0}\nnet.add_poisson_drive(\n    'poisson', rate_constant=rate_constant, weights_ampa=weights_ampa,\n    location='proximal', synaptic_delays=synaptic_delays,\n    event_seed=1349)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dpls = simulate_dipole(net, tstop=250.)\nscaling_factor = 30000\ndpls = [dpl.scale(scaling_factor) for dpl in dpls]  # scale in place"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Take a look at how different cell types respond to the exogenous drive. Note\nthe periodic firing pattern of all cell types. While the basket cells fire\nrelatively synchronously, the pyramidal cell populations display a more\nvaried pattern, in which only a fraction of cells reach firing threshold.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net.cell_response.plot_spikes_raster()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "To confirm that the periodicity observed in the firing patterns correspond to\na population oscillation in the gamma-range, we can plot the time-frequency\nrepresentation together with the signal. Note that the network requires some\ntime to reach steady state. Hence, we omit the first 50 ms in our analysis.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "tmin = 50\ntrial_idx = 0  # pick first trial\n\n# plot dipole time course and time-frequency representation in same figure\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(2, 1, sharex=True, figsize=(6, 6),\n                         constrained_layout=True)\n\ndpls[trial_idx].plot(tmin=tmin, ax=axes[0], show=False)\n\n# Create an fixed-step tiling of frequencies from 20 to 100 Hz in steps of 1 Hz\nfreqs = np.arange(20., 100., 1.)\ndpls[trial_idx].plot_tfr_morlet(freqs, n_cycles=7, tmin=tmin, ax=axes[1])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now, let us try to re-run the simulation with a tonic bias\napplied to the L5 Pyramidal cells. Notice that the oscillation waveform is\nmore regular, with less noise due to the fact that the tonic depolarization\ndominates over the influence of the Poisson drive. By default, a tonic bias\nis applied to the entire duration of the simulation.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net.add_tonic_bias(cell_type='L5_pyramidal', amplitude=6.)\ndpls = simulate_dipole(net, tstop=250., n_trials=1)\ndpls = [dpl.scale(scaling_factor) for dpl in dpls]  # scale in place\n\ndpls[trial_idx].plot()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Notice that the Layer 5 pyramidal neurons now fire nearly synchronously,\nleading to a synchronous activation of the inhibitory basket neurons,\nresulting in a low-latency IPSP back onto the pyramidal cells. The duration\nof the IPSP is ~20 ms, after which the combined effect of the tonic bias and\nPoisson drive is to bring the pyramidal cells back to firing threshold,\ncreating a ~50 Hz PING rhythm. This type of synchronous rhythm is sometimes\nreferred to as \u201cstrong\u201d PING.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net.cell_response.plot_spikes_raster()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Although the simulated dipole signal demonstrates clear periodicity, its\nfrequency is lower compared with the \"weak\" PING simulation above.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "from hnn_core.viz import plot_psd\nplot_psd(dpls[trial_idx], fmin=20., fmax=100., tmin=tmin)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Finally, we demonstrate the mechanistic link between PING and the GABAA decay\ntime constant (`tau2`). Using the same network/drive configuration as before,\nwe decrease `tau2` from 5 to 2 ms. This will shorten the effective\nrefactory period between L5 pyramidal cell spikes and increase the PING\nfrequency from ~50 to ~65 Hz.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net.cell_types['L5_pyramidal'].synapses['gabaa']['tau2'] = 2\ndpls = simulate_dipole(net, tstop=250., n_trials=1)\ndpls = [dpl.scale(scaling_factor) for dpl in dpls]  # scale in place\n\nfig, axes = plt.subplots(3, 1, sharex=True, figsize=(6, 6),\n                         constrained_layout=True)\ndpls[trial_idx].plot(ax=axes[0], show=False)\nnet.cell_response.plot_spikes_raster(ax=axes[1], show=False)\ndpls[trial_idx].plot_tfr_morlet(freqs, n_cycles=7, tmin=tmin, ax=axes[2])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## References\n.. [1] Lee, S. & Jones, S. R. Distinguishing mechanisms of gamma frequency\n       oscillations in human current source signals using a computational\n       model of a laminar neocortical network. Frontiers in human\n       neuroscience (2013)\n\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.19"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}