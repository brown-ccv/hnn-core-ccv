{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# 05. Optimize simulated evoked response parameters\n\nThis example demonstrates how to optimize the parameters\nof the model simulation to match an experimental dipole waveform.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# Authors: Blake Caldwell <blake_caldwell@brown.edu>\n#          Mainak Jas <mjas@mgh.harvard.edu>\n\nimport os.path as op\n\nimport numpy as np\nimport matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let us import hnn_core\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import hnn_core\nfrom hnn_core import (MPIBackend, jones_2009_model, read_params,\n                      simulate_dipole, read_dipole)\n\n\nhnn_core_root = op.join(op.dirname(hnn_core.__file__))\n\n# The number of cores may need modifying depending on your current machine.\nn_procs = 10"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "First, we will load experimental data into Dipole object.\n\nThis is a different experiment than the one to which the base parameters were\ntuned. So, the initial RMSE will be large, giving the optimization procedure\na lot to work with.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "from urllib.request import urlretrieve\n\ndata_url = ('https://raw.githubusercontent.com/jonescompneurolab/hnn/master/'\n            'data/MEG_detection_data/S1_SupraT.txt')\nurlretrieve(data_url, 'S1_SupraT.txt')\nexp_dpl = read_dipole('S1_SupraT.txt')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Read the base parameters from a file\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "params_fname = op.join(hnn_core_root, 'param', 'default.json')\nparams = read_params(params_fname)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let's first simulate the dipole with some initial parameters. The parameter\ndefinitions also contain the drives. Even though we could add drives\nexplicitly through our API\n(see `sphx_glr_auto_examples_workflows_plot_simulate_evoked.py`),\nfor conciseness,\nwe add them automatically from the parameter files\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "scale_factor = 3000.\nsmooth_window_len = 30.\ntstop = exp_dpl.times[-1]\nnet = jones_2009_model(params=params, add_drives_from_params=True)\nwith MPIBackend(n_procs=n_procs):\n    print(\"Running simulation with initial parameters\")\n    initial_dpl = simulate_dipole(net, tstop=tstop, n_trials=1)[0]\n    initial_dpl = initial_dpl.scale(scale_factor).smooth(smooth_window_len)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we start the optimization!\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "from hnn_core.optimization import optimize_evoked\n\nwith MPIBackend(n_procs=n_procs):\n    params_optim = optimize_evoked(params, exp_dpl, initial_dpl,\n                                   scale_factor=scale_factor,\n                                   smooth_window_len=smooth_window_len)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now, let's simulate the dipole with the optimized parameters.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "net = jones_2009_model(params=params_optim, add_drives_from_params=True)\nwith MPIBackend(n_procs=n_procs):\n    best_dpl = simulate_dipole(net, tstop=tstop, n_trials=1)[0]\n    best_dpl = best_dpl.scale(scale_factor).smooth(smooth_window_len)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Finally, we can plot the results against experimental data along with the\ninput histograms:\n1. Initial dipole\n2. Optimized dipole fit\n\nUpon visualizing the change in optimized versus initial dipole, you should\nconsider exploring which parameters were changed to cause the improved dipole\nfit.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "fig, axes = plt.subplots(2, 1, sharex=True, figsize=(6, 6))\n\nexp_dpl.plot(ax=axes[0], layer='agg', show=False)\ninitial_dpl.plot(ax=axes[0], layer='agg', show=False)\nbest_dpl.plot(ax=axes[0], layer='agg', show=False)\naxes[0].legend(['experimental', 'initial', 'optimized'])\nnet.cell_response.plot_spikes_hist(ax=axes[1])"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}